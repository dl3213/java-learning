package code.sibyl.config;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;
import org.springframework.boot.ApplicationRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.ClassPathResource;
import org.springframework.r2dbc.core.DatabaseClient;
import org.springframework.util.StreamUtils;
import reactor.core.publisher.Mono;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;

@Configuration
@Slf4j
public class H2Config {

//    @Bean
//    public ApplicationRunner initDatabase(DatabaseClient client, DatabaseRepository repository) throws IOException {
//        List<String> statements = Arrays.asList(
//                "DROP TABLE IF EXISTS t_database;","create table T_DATABASE(\n" +
//                        "    id bigint generated by default as identity,\n" +
//                        "    name varchar(255),\n" +
//                        "    type varchar(255),\n" +
//                        "    version int,\n" +
//                        "    primary key(id)\n" +
//                        ");","insert into T_DATABASE values(0,'test','test',0);");
//        ClassPathResource resource = new ClassPathResource("/db/schema.sql");
//        System.err.println(resource.exists());
//        System.err.println(resource.getFilename());
//        InputStream inputStream = resource.getInputStream();
//        String str = StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8);
//        System.err.println(str);
//        statements.forEach(sql -> executeSql(client, sql)
//                .doOnError(error -> log.error("got error: {}", error.getMessage(), error))
//                .subscribe()
//        );
//        return args -> {};
//    }
//
//    private Mono<Long> executeSql(DatabaseClient client, String sql) {
//        return client.sql(sql).fetch().rowsUpdated();
//    }
}
